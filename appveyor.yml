# This is the configuration file for AppVeyor builds.
# Look at the following for reference:
# https://www.appveyor.com/docs/appveyor-yml

# Notes:
#   - Minimal appveyor.yml file is an empty file. All sections are optional.
#   - Indent each level of configuration with 2 spaces. Do not use tabs!
#   - All section names are case-sensitive.
#   - Section names should be unique on each level.

#---------------------------------#
#      general configuration      #
#---------------------------------#

# version format
version: 1.0.{build}

#---------------------------------#
#    environment configuration    #
#---------------------------------#

environment:
  matrix:
  - platform: msvc
  - platform: vs2005_64
  - platform: vs2008_64
  - platform: vs2010_64
  - platform: vs2012_64
  - platform: vs2013_64
  - platform: vs2015_64
  - platform: vs2017_64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
  - platform: vs2012_ARM
  - platform: vs2013_ARM
  - platform: vs2015_ARM
  - platform: vs2017_ARM
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
  - platform: cygwin
  - platform: mingw32
  - platform: mingw64msys

# scripts that are called at very beginning, before repo cloning
# init:

# clone directory
clone_folder: c:\projects\check

# scripts that are called at very beginning, before repo cloning
init:
  - git config --global core.autocrlf input

#---------------------------------#
#       build configuration       #
#---------------------------------#

# build Configuration, i.e. Debug, Release, etc.
configuration: Release

# scripts to run before build
before_build:
  - cd c:\projects\check
  # Remove the following from the path, as it will interfere with
  # the MinGW builds
  - set PATH=%PATH:C:\Program Files\Git\usr\bin;=%
  - if %platform%==msvc call "C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\vcvarsall.bat"
  - if %platform%==msvc cmake -G "NMake Makefiles" -DCMAKE_INSTALL_PREFIX=%P%
  - if %platform%==vs2005_64 cmake -G "Visual Studio 8 2005" -DCMAKE_INSTALL_PREFIX=%P%
  - if %platform%==vs2008_64 cmake -G "Visual Studio 9 2008" -DCMAKE_INSTALL_PREFIX=%P%
  - if %platform%==vs2010_64 cmake -G "Visual Studio 10 2010 Win64" -DCMAKE_INSTALL_PREFIX=%P%
  - if %platform%==vs2012_64 cmake -G "Visual Studio 11 2012 Win64" -DCMAKE_INSTALL_PREFIX=%P%
  - if %platform%==vs2013_64 cmake -G "Visual Studio 12 2013 Win64" -DCMAKE_INSTALL_PREFIX=%P%
  - if %platform%==vs2015_64 cmake -G "Visual Studio 14 2015 Win64" -DCMAKE_INSTALL_PREFIX=%P%
  - if %platform%==vs2017_64 cmake -G "Visual Studio 15 2017 Win64" -DCMAKE_INSTALL_PREFIX=%P%
  - if %platform%==vs2012_ARM cmake -G "Visual Studio 11 2012 ARM" -DCMAKE_INSTALL_PREFIX=%P%
  - if %platform%==vs2013_ARM cmake -G "Visual Studio 12 2013 ARM" -DCMAKE_INSTALL_PREFIX=%P%
  - if %platform%==vs2015_ARM cmake -G "Visual Studio 14 2015 ARM" -DCMAKE_INSTALL_PREFIX=%P%
  - if %platform%==vs2017_ARM cmake -G "Visual Studio 15 2017 ARM" -DCMAKE_INSTALL_PREFIX=%P%
  - if %platform%==cygwin set PATH=C:\cygwin\bin;%PATH%
  - if %platform%==cygwin bash -c "autoreconf -i"
  - if %platform%==cygwin bash -c "./configure"
  - if %platform%==mingw32 set PATH=C:\MinGW\bin;%PATH%
  - if %platform%==mingw32 cmake -G "MinGW Makefiles" -DCMAKE_INSTALL_PREFIX=%P%
  - if %platform%==mingw64msys set PATH=C:\msys64\mingw64\bin;C:\msys64\usr\bin;%PATH%
  - if %platform%==mingw64msys bash -c "autoreconf -i"
  - if %platform%==mingw64msys bash -c "./configure"

#Platforms supported by AppVeyor, as of 2017-08-28
#Generators
#  Visual Studio 15 2017 [arch] = Generates Visual Studio 2017 project files.
#                                 Optional [arch] can be "Win64" or "ARM".
#  Visual Studio 14 2015 [arch] = Generates Visual Studio 2015 project files.
#                                 Optional [arch] can be "Win64" or "ARM".
#  Visual Studio 12 2013 [arch] = Generates Visual Studio 2013 project files.
#                                 Optional [arch] can be "Win64" or "ARM".
#  Visual Studio 11 2012 [arch] = Generates Visual Studio 2012 project files.
#                                 Optional [arch] can be "Win64" or "ARM".
#  Visual Studio 10 2010 [arch] = Generates Visual Studio 2010 project files.
#                                 Optional [arch] can be "Win64" or "IA64".
#  Visual Studio 9 2008 [arch]  = Generates Visual Studio 2008 project files.
#                                 Optional [arch] can be "Win64" or "IA64".
#  Visual Studio 8 2005 [arch]  = Generates Visual Studio 2005 project files.
#                                 Optional [arch] can be "Win64".
#  Visual Studio 7 .NET 2003    = Deprecated.  Generates Visual Studio .NET
#                                 2003 project files.
#  Borland Makefiles            = Generates Borland makefiles.
#  NMake Makefiles              = Generates NMake makefiles.
#  NMake Makefiles JOM          = Generates JOM makefiles.
#  Green Hills MULTI            = Generates Green Hills MULTI files
#                                 (experimental, work-in-progress).
#  MSYS Makefiles               = Generates MSYS makefiles.
#  MinGW Makefiles              = Generates a make file for use with
#                                 mingw32-make.
#  Unix Makefiles               = Generates standard UNIX makefiles.
#  Ninja                        = Generates build.ninja files.
#  Watcom WMake                 = Generates Watcom WMake makefiles.
#  CodeBlocks - MinGW Makefiles = Generates CodeBlocks project files.
#  CodeBlocks - NMake Makefiles = Generates CodeBlocks project files.
#  CodeBlocks - NMake Makefiles JOM
#                               = Generates CodeBlocks project files.
#  CodeBlocks - Ninja           = Generates CodeBlocks project files.
#  CodeBlocks - Unix Makefiles  = Generates CodeBlocks project files.
#  CodeLite - MinGW Makefiles   = Generates CodeLite project files.
#  CodeLite - NMake Makefiles   = Generates CodeLite project files.
#  CodeLite - Ninja             = Generates CodeLite project files.
#  CodeLite - Unix Makefiles    = Generates CodeLite project files.
#  Sublime Text 2 - MinGW Makefiles
#                               = Generates Sublime Text 2 project files.
#  Sublime Text 2 - NMake Makefiles
#                               = Generates Sublime Text 2 project files.
#  Sublime Text 2 - Ninja       = Generates Sublime Text 2 project files.
#  Sublime Text 2 - Unix Makefiles
#                               = Generates Sublime Text 2 project files.
#  Kate - MinGW Makefiles       = Generates Kate project files.
#  Kate - NMake Makefiles       = Generates Kate project files.
#  Kate - Ninja                 = Generates Kate project files.
#  Kate - Unix Makefiles        = Generates Kate project files.
#  Eclipse CDT4 - NMake Makefiles
#                               = Generates Eclipse CDT 4.0 project files.
#  Eclipse CDT4 - MinGW Makefiles
#                               = Generates Eclipse CDT 4.0 project files.
#  Eclipse CDT4 - Ninja         = Generates Eclipse CDT 4.0 project files.
#  Eclipse CDT4 - Unix Makefiles= Generates Eclipse CDT 4.0 project files.


build_script:
  # build code and unit tests
  - if %platform%==msvc nmake
  - if %platform%==vs msbuild "ALL_BUILD.vcxproj"
  - if %platform%==cygwin bash -c "make"
  - if %platform%==mingw32 mingw32-make
  - if %platform%==mingw64msys bash -c "make"

test_script:
  # run unit tests
  - echo Running unit tests...
  - if %platform%==msvc nmake test VERBOSE=1 CTEST_OUTPUT_ON_FAILURE=TRUE
  - if %platform%==vs ctest --extra-verbose -C Release
  - if %platform%==cygwin bash -c "make check"
  - if %platform%==mingw32 tests\check_check.exe
  - if %platform%==mingw64msys bash -c "tests/check_check"

on_finish:
  - if %platform%==cygwin bash -c "cat tests/test-suite.log || true"
